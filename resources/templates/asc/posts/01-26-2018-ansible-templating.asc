{:title  "Ansible role configuration: best practice"
  :layout :post
  :tags   ["ansible" "haproxy"]}

Let's take for example HAProxy. This wonderful piece of software can be configured with hundreds of options. How to write an Ansible role to handle this, AND share this role accross multiple projects/teams/companies ?

== The naive solution: the boss template

If you use Ansible, you may have met the boss template: a big template, with dozens of variables (frequently nested) to handle all available configuration options, {% if %} and {% for %} jinja2 everywhere... And when someone needs a new option, a new variable is added.

Theses roles are nightmares to maintain. For https://www.haproxy.org/download/1.8/doc/configuration.txt[HAproxy] for example, your template will be huge. Same things for other softwares (softwares like Kafka, Elasticsearch... also have a lot of configuration options).

Furthermore, these roles are impossible share between teams/open source, because they are often designed for a specific company use case, with a specific configuration.

== Move configuration outside of the role.

Let's continue with HAProxy. Just write a simple HAProxy role: installing HAProxy, templating a default configuration, and dealing with restart/reload on configuration change. But let the person using the role override the default configuration files.

For example

In `defaults/main.yml`, define a variable containing a list of templates (HAProxy does not support loading configuration from a directory, so these files will be assembled together by the role):

```yaml
haproxy_templates:
  - src: haproxy.config.j2
    dest: 01_haproxy_config
```

`haproxy.config.j2` contains the default HAProxy configuration (the same you have when you install HAProxy using `apt-get`).

Now, in `playbook_dir` you will probably have this arborescence:

```
playbook.yml
group_vars/
    haproxy.yml
templates/
    haproxy/
         my-config.j2
```

The user can now provide his own configuration for HAProxy, by overriding `haproxy_templates` in `group_vars/haproxy.yml` for example:

```yaml
haproxy_templates:
  - src: haproxy/my-config.j2
    dest: 01_my_config
```

The user can put everything he wants in `my-config.j2`, use his own configuration variables in the file without polluting the role.

The role stay simple, the user can do everything he wants, everyone is happy.

== Conclusion

Write simple roles. The role should install the software, deal with stuff like init/systemd service files, log rotation and so one, but don't try to configure the software if too much configuration option exists. Let the user do that by letting him override the template list.
